generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

// ENUMs for defining fixed sets of values
enum Role {
  TOURIST
  POLICE
  CENTRAL_AUTHORITY
  CHECKPOINT_STAFF
}

enum IncidentStatus {
  REPORTED
  INVESTIGATING
  CONFIRMED
  DISMISSED
  RESOLVED
}

// User model for authentication and roles
model User {
  id             String        @id @default(uuid())
  email          String        @unique
  passwordHash   String
  role           Role
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  touristProfile TouristProfile?
  jurisdictionId String?
  jurisdiction   Jurisdiction? @relation(fields: [jurisdictionId], references: [id])
}

// Police jurisdictions with hierarchy
model Jurisdiction {
  id        String   @id @default(uuid())
  name      String
  boundary  Unsupported("geometry(Polygon, 4326)")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parentId  String?
  parent    Jurisdiction?  @relation("Hierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Jurisdiction[] @relation("Hierarchy")
  users     User[]
  geofences Geofence[]
  incidents Incident[]
}

// Tourist-specific data
model TouristProfile {
  id                    String    @id @default(uuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id])
  fullName              String?   // Optional at creation
  kycDocumentType       String?   // Optional at creation
  kycDocumentIdHash     String?   // Optional at creation
  kycDocumentUrl        String?   // ADDED: For Cloudinary URL
  kycVerificationStatus Boolean   @default(false)
  verifiedByUserId      String?
  kycBlockchainHash     String?
  digitalIdQrCode       String?   // Optional at creation
  phoneNumber           String?   // Optional at creation
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relationships
  emergencyContacts   EmergencyContact[]
  trips               Trip[]
  incidents           Incident[]
}

model EmergencyContact {
  id               String         @id @default(uuid())
  name             String
  phoneNumber      String
  relationship     String
  touristProfileId String
  touristProfile   TouristProfile @relation(fields: [touristProfileId], references: [id])
}

model Trip {
  id               String         @id @default(uuid())
  touristProfileId String
  touristProfile   TouristProfile @relation(fields: [touristProfileId], references: [id])
  itineraryDetails Json?
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime       @default(now())
}

// Police-defined risk zones
model Geofence {
  id             String       @id @default(uuid())
  name           String
  area           Unsupported("geometry(Polygon, 4326)")
  riskScore      Float
  description    String?
  jurisdictionId String
  jurisdiction   Jurisdiction @relation(fields: [jurisdictionId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Records of detected anomalies/incidents
model Incident {
  id                     String         @id @default(uuid())
  touristProfileId       String
  touristProfile         TouristProfile @relation(fields: [touristProfileId], references: [id])
  location               Unsupported("geometry(Point, 4326)")
  timestamp              DateTime
  anomalyType            String
  status                 IncidentStatus @default(REPORTED)
  details                Json
  evidenceBlockchainHash String?
  jurisdictionId         String
  jurisdiction           Jurisdiction   @relation(fields: [jurisdictionId], references: [id])
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
}

// Location data for the heatmap
model HeatmapData {
  id          String   @id @default(uuid())
  location    Unsupported("geometry(Point, 4326)")
  safetyScore Float
  lastUpdated DateTime @updatedAt
}

